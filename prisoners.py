#!/usr/bin/env python3

"""
Need k containers, numbered 1-k
From the set {1..k} randomly distribute the values into the containers w/o replacement
Run k trials, where for the n'th trial (0 < n <= k), the following procedure is applied:
 - On each trial, a sequence S_n = {s_0..s_(k/2)} is created from the containers
 - The procedure for selecting S is unknown
 - No information about the other trials is available
 - When s_j is selected, all values in {s_0..s_(j-1)} are known
The outcome as determined at the end of the n'th trial as follows:
 - If n is in S:
   - Continue to the next trial if n < k
   - The game has been won if n = k
 - If n is not in S, the game has been lost

The following strategy is used for the n'th trial:
 - The starting value, s_0, is set to the contents of container `n` (a number x in {1..k})
 - For each s_p (0 < p <= k/2) the value is set to the contents of the container labeled s_(p-1)
"""

import random

def trial(containers, trial_number, strategy):
    """
    returns True if `trial_number` was found in the sequence generated by iteratively applying
    `strategy` to `containers` using the stated rules
    """
    num_containers = len(containers)
    choices = []
    for _ in range(int(num_containers / 2)):
        choices.append(containers[strategy(choices, trial_number, num_containers)])
    return (trial_number in choices)


def all_trials(num_containers, strategy):
    """
    returns True if a random set of containers was successful on all trials
    """
    random.shuffle(containers := [x for x in range(num_containers)])
    result_of_all_trials = [trial(containers, n, strategy) for n in range(num_containers)]
    return (num_containers == len([*filter(None, result_of_all_trials)]))


# Below is wrapper to run many trials

def seek_success(num_containers, my_strategy):
    """
    returns the number of attempted trials until success for `k` containers
    """
    ct = 1
    while not all_trials(num_containers, my_strategy):
        ct += 1
    return ct


num_containers = 100
num_tests = 1000
my_strategy = lambda seen, target, num_containers: target if len(seen) == 0 else seen[-1]

result_cts = [seek_success(num_containers, my_strategy) for _ in range(num_tests)]
avg = sum(result_cts) / len(result_cts)
print(avg)
